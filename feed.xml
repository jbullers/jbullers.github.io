<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://jbullers.github.io/" rel="self" type="application/rss+xml"/><title>ramblings</title><link>https://jbullers.github.io/</link><description>This blog is a collection of my various thoughts on software (and perhaps other topics). No real theme, just whatever has popped into my head or piqued my interest at the time.</description><lastBuildDate>Thu, 14 Sep 2023 11:41:02 -0400</lastBuildDate><generator>clj-rss</generator><item><guid>https://jbullers.github.io/posts/2023-09-12-babashka</guid><link>https://jbullers.github.io/posts/2023-09-12-babashka</link><title>Clojure Scripts</title><description>Not to be confused with ClojureScript, you can write scripts with Clojure using Babashka. Super handy when you just need to whip something together quick and don't want to struggle with Bash. Here's my first encounter with this handy tool.</description><pubDate>Tue, 12 Sep 2023 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2023-09-10-why-clojure</guid><link>https://jbullers.github.io/posts/2023-09-10-why-clojure</link><title>Why Clojure?</title><description>I've had an on-again, off-again relationship with Clojure for years. Despite not using it in any way at work, and despite many false starts, I keep picking it back up. What keeps me interested in Clojure? Why is it so great? Uncle Bob wrote an article about that a few years back, and I think it misses the mark.</description><pubDate>Sun, 10 Sep 2023 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2023-09-06-moving-to-github</guid><link>https://jbullers.github.io/posts/2023-09-06-moving-to-github</link><title>Moving to GitHub</title><description>Resurrecting my ancient GitLab blog on GitHub.</description><pubDate>Wed, 06 Sep 2023 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2016-09-09-impossible-test</guid><link>https://jbullers.github.io/posts/2016-09-09-impossible-test</link><title>To Test... the Untestable Code</title><description>Maybe you hear it often, or maybe you've said it yourself: &lt;em&gt;I would write an automated test for it if it wasn't impossible to test.&lt;/em&gt; Is it impossible though? Let's get creative.</description><pubDate>Fri, 09 Sep 2016 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2016-05-25-encapsulation</guid><link>https://jbullers.github.io/posts/2016-05-25-encapsulation</link><title>Encapsulation and Information Hiding</title><description>What does it mean to have "strong encapsulation" and to "hide information"? Are getters and setters enough? An exploration of designing classes that reveal as little as possible.</description><pubDate>Wed, 25 May 2016 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2016-03-15-intersection-union-types</guid><link>https://jbullers.github.io/posts/2016-03-15-intersection-union-types</link><title>Intersection and Union Types</title><description>Buckle up for a trip down the rabbit hole! What are &lt;em&gt;intersection types&lt;/em&gt; and &lt;em&gt;union types&lt;/em&gt;, can we use them in Java, and why would we want to?</description><pubDate>Tue, 15 Mar 2016 00:00:00 -0400</pubDate></item><item><guid>https://jbullers.github.io/posts/2016-02-17-inheritance-delegation</guid><link>https://jbullers.github.io/posts/2016-02-17-inheritance-delegation</link><title>Inheritance and Delegation</title><description>We learn a lot about inheritance, and our languages often have constructs that lead us to using it as the solution to many modeling problems. But then we're also told we should prefer delegation to inheritance. What gives?</description><pubDate>Wed, 17 Feb 2016 00:00:00 -0500</pubDate></item><item><guid>https://jbullers.github.io/posts/2016-02-09-objects-values-api</guid><link>https://jbullers.github.io/posts/2016-02-09-objects-values-api</link><title>Objects, Values and API Design</title><description>Some OO languages like Java have historically only provided one way to create new types: the &lt;code&gt;class&lt;/code&gt; keyword. But there's a difference between defining value types and object types, and that difference bleeds over in to API design.</description><pubDate>Tue, 09 Feb 2016 00:00:00 -0500</pubDate></item></channel></rss>